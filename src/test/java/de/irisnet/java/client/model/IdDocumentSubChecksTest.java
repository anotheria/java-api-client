/*
 * Irisnet API
 * Artificial Intelligence (AI) for image- and video-processing in real-time. This is an interactive documentation where you can quickly look up the endpoints and their schemas, while having the opportunity to try things out for yourself.  In the list below, you can see the available endpoints of the API, which can be expanded by clicking on them. Each expanded endpoint lists the request parameters (if available) and the request body (if available). The request body can list some example bodies and the schema, explaining each model in detail.  Additionally you'll find a 'Try it out' button that allows you to enter your custom parameters and custom body and execute that against the API. <b>Be sure to enter your license key to authorize the requests before using this documentation interactively.</b>  The responses section in the expanded endpoint lists the possible responses with their corresponding status codes. If you've executed an API call it will also show you the response from the server.  Underneath the endpoints you'll find the model schemas. These are the models used for the requests and responses. If you click on the right arrow, you can expand the model and get a description of the model and the model parameters. For nested models, you can keep clicking the right arrow for further details.  Clicking the link below the title at the top of this page opens the [OpenAPI specification](https://swagger.io/specification/) (OAS3) in JSON format. The OAS3 Spec allows the generation of clients in many programming languages. There are several free client generators available that can be used to get started easily.
 *
 * The version of the OpenAPI document: v2
 * Contact: info@irisnet.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.irisnet.java.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for IdDocumentSubChecks
 */
public class IdDocumentSubChecksTest {
    private final IdDocumentSubChecks model = new IdDocumentSubChecks();

    /**
     * Model tests for IdDocumentSubChecks
     */
    @Test
    public void testIdDocumentSubChecks() {
        // TODO: test IdDocumentSubChecks
    }

    /**
     * Test the property 'mrzChecksum'
     */
    @Test
    public void mrzChecksumTest() {
        // TODO: test mrzChecksum
    }

    /**
     * Test the property 'mrzFormat'
     */
    @Test
    public void mrzFormatTest() {
        // TODO: test mrzFormat
    }

    /**
     * Test the property 'mrzConsistency'
     */
    @Test
    public void mrzConsistencyTest() {
        // TODO: test mrzConsistency
    }

    /**
     * Test the property 'expirationDate'
     */
    @Test
    public void expirationDateTest() {
        // TODO: test expirationDate
    }

    /**
     * Test the property 'securityElements'
     */
    @Test
    public void securityElementsTest() {
        // TODO: test securityElements
    }

    /**
     * Test the property 'photoLocation'
     */
    @Test
    public void photoLocationTest() {
        // TODO: test photoLocation
    }

    /**
     * Test the property 'blacklistCheck'
     */
    @Test
    public void blacklistCheckTest() {
        // TODO: test blacklistCheck
    }

    /**
     * Test the property 'photocopyCheck'
     */
    @Test
    public void photocopyCheckTest() {
        // TODO: test photocopyCheck
    }

    /**
     * Test the property 'tamperingCheck'
     */
    @Test
    public void tamperingCheckTest() {
        // TODO: test tamperingCheck
    }

    /**
     * Test the property 'specimenCheck'
     */
    @Test
    public void specimenCheckTest() {
        // TODO: test specimenCheck
    }

    /**
     * Test the property 'documentModelIdentification'
     */
    @Test
    public void documentModelIdentificationTest() {
        // TODO: test documentModelIdentification
    }

    /**
     * Test the property 'documentLivenessCheck'
     */
    @Test
    public void documentLivenessCheckTest() {
        // TODO: test documentLivenessCheck
    }

    /**
     * Test the property 'spoofedImageAnalysis'
     */
    @Test
    public void spoofedImageAnalysisTest() {
        // TODO: test spoofedImageAnalysis
    }

    /**
     * Test the property 'faceLivenessCheck'
     */
    @Test
    public void faceLivenessCheckTest() {
        // TODO: test faceLivenessCheck
    }

}

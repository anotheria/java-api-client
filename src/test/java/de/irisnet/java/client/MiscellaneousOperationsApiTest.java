/*
 * Irisnet API
 * Artificial Intelligence (AI) for image- and video-processing in realtime. This is an interactive documentation meant to give a place were you can quickly look up the endpoints and their schemas, while also giving you the option to try things out yourself.  Listed below you'll see the available endpoints of the API that can be expanded by clicking on it. Each expanded endpoint lists the request parameter (if available) and the request body (if available). The request body can list some example bodies and the schema, explaining each model in detail. Additionally you'll find a 'Try it out' button where you can type in your custom parameters and custom body and execute that against the API. The responses section in the expanded endpoint lists the possible responses with their corresponding status codes. If you've executed an API call it will also show you the response from the server.  Underneath the endpoints you'll find the model schemas. These are the models used for the requests and responses.By clicking on the right arrow you can expand the model and it will show you a description of the model and the model parameters. For nested models you can keep clicking the right arrow to reveal further details on it.  
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.irisnet.java.client;

import de.irisnet.java.ApiException;
import java.io.File;
import de.irisnet.java.client.model.INError;
import de.irisnet.java.client.model.LicenseInfo;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MiscellaneousOperationsApi
 */
@Ignore
public class MiscellaneousOperationsApiTest {

    private final MiscellaneousOperationsApi api = new MiscellaneousOperationsApi();

    
    /**
     * Get the resulting media file.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadProcessedTest() throws ApiException {
        String filename = null;
        File response = api.downloadProcessed(filename);

        // TODO: test validations
    }
    
    /**
     * Get the cost per image check of the previously set parameters. The cost of the configuration is subtracted from the license key during each check.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAICostTest() throws ApiException {
        Long response = api.getAICost();

        // TODO: test validations
    }
    
    /**
     * Get information from given license key.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLicenseInfoTest() throws ApiException {
        String licenseKey = null;
        LicenseInfo response = api.getLicenseInfo(licenseKey);

        // TODO: test validations
    }
    
}

/*
 * Irisnet API
 * Artificial Intelligence (AI) for image- and video-processing in real-time. This is an interactive documentation where you can quickly look up the endpoints and their schemas, while having the opportunity to try things out for yourself.  In the list below, you can see the available endpoints of the API, which can be expanded by clicking on them. Each expanded endpoint lists the request parameters (if available) and the request body (if available). The request body can list some example bodies and the schema, explaining each model in detail.  Additionally you'll find a 'Try it out' button that allows you to enter your custom parameters and custom body and execute that against the API. <b>Be sure to enter your license key to authorize the requests before using this documentation interactively.</b>  The responses section in the expanded endpoint lists the possible responses with their corresponding status codes. If you've executed an API call it will also show you the response from the server.  Underneath the endpoints you'll find the model schemas. These are the models used for the requests and responses. If you click on the right arrow, you can expand the model and get a description of the model and the model parameters. For nested models, you can keep clicking the right arrow for further details.  Clicking the link below the title at the top of this page opens the [OpenAPI specification](https://swagger.io/specification/) (OAS3) in JSON format. The OAS3 Spec allows the generation of clients in many programming languages. There are several free client generators available that can be used to get started easily.
 *
 * The version of the OpenAPI document: v2
 * Contact: info@irisnet.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.irisnet.java.client;

import de.irisnet.java.ApiException;
import de.irisnet.java.client.model.ApiNotice;
import de.irisnet.java.client.model.Callback;
import de.irisnet.java.client.model.CheckResult;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AiCheckOperationsApi
 */
@Disabled
public class AiCheckOperationsApiTest {

    private final AiCheckOperationsApi api = new AiCheckOperationsApi();

    /**
     * Check an image with the AI.
     *
     * The response (_CheckResult_ schema) is returned immediately after the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkImageTest() throws ApiException {
        UUID configId = null;
        String url = null;
        Integer detail = null;
        Boolean imageEncode = null;
        CheckResult response = api.checkImage(configId, url, detail, imageEncode);
        // TODO: test validations
    }

    /**
     * Check a stream with the AI.
     *
     * The body is continuously send per JSON stream until completion of the video stream. Only then the full _CheckResult_ schema will be shown (past _Events_ omitted).  &lt;b&gt;NOTICE: Depending on your configuration and parameters this operation can be quite expensive on your credit balance.&lt;b&gt;  &lt;b&gt;WARNING: Please do not use the &#39;Try it out&#39; for this operation. The browser is not able to refresh the response preview until the completion of the video stream.&lt;b&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkStreamTest() throws ApiException {
        UUID configId = null;
        String inUrl = null;
        String outUrl = null;
        Integer cycleLength = null;
        Integer checkRate = null;
        List<CheckResult> response = api.checkStream(configId, inUrl, outUrl, cycleLength, checkRate);
        // TODO: test validations
    }

    /**
     * Check a video with the AI.
     *
     * An empty response is returned immediately. The actual body (_CheckResult_ schema) is send to the _callbackUrl_ after the AI has finished processing.  &lt;b&gt;NOTICE: Depending on your configuration and parameters this operation can be quite expensive on your credit balance.&lt;b&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkVideoTest() throws ApiException {
        UUID configId = null;
        String url = null;
        Callback callback = null;
        Integer detail = null;
        Boolean imageEncode = null;
        Integer checkRate = null;
        api.checkVideo(configId, url, callback, detail, imageEncode, checkRate);
        // TODO: test validations
    }

}

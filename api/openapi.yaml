openapi: 3.0.1
info:
  description: |+
    Artificial Intelligence (AI) for image- and video-processing in realtime. This is an interactive documentation meant to give a place were you can quickly look up the endpoints and their schemas, while also giving you the option to try things out yourself.

    Listed below you'll see the available endpoints of the API that can be expanded by clicking on it. Each expanded endpoint lists the request parameter (if available) and the request body (if available). The request body can list some example bodies and the schema, explaining each model in detail. Additionally you'll find a 'Try it out' button where you can type in your custom parameters and custom body and execute that against the API.
    The responses section in the expanded endpoint lists the possible responses with their corresponding status codes. If you've executed an API call it will also show you the response from the server.

    Underneath the endpoints you'll find the model schemas. These are the models used for the requests and responses.By clicking on the right arrow you can expand the model and it will show you a description of the model and the model parameters. For nested models you can keep clicking the right arrow to reveal further details on it.

  termsOfService: https://www.irisnet.de/allgemeine-geschaeftsbedingungen/
  title: Irisnet API
  version: v1
servers:
- description: Live Server
  url: https://api.irisnet.de
tags:
- description: "Typically an interaction with the AI can be setup with one or two\
    \ API calls. Depending on your needs you can \n* 1. use the '_set-definition_'\
    \ endpoint for granular setup\n* 2. and the '_set-parameters_' endpoint to than\
    \ fine tune the setup of the AI, if required.\n\n* 3. use the endpoints for AI-checks\
    \ listed below to test against the AI-definition and rules.\n\nThe subsequent\
    \ checks will refer to the prior setup. If you want to reset your setup, restart\
    \ from step 1."
  name: Endpoints to setup the AI
- description: After having setup the AI you can do one or more checks. Choose what
    check best works for your case
  name: Endpoints for AI-checks
- description: Retrieve license key information, download the processed media or find
    out how many credits a setup will cost.
  name: Miscellaneous operations
paths:
  /v1/set-parameters:
    post:
      description: Overwrites or extends the default configuration of the AI. By setting
        precise behaviour parameters, the AI can be fine tuned for specific use cases.
        To reset the parameters to their default values, make a post request to 'set-definition'.
      operationId: setINParams
      requestBody:
        content:
          application/xml:
            examples:
              Default parameter set:
                description: Shows the default parameters set by the AI. This is automatically
                  set, if no custom parameters are posted.
                value: "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"\
                  ?>\n<inParams>\n\t<inDefault thresh=\"0.5\" grey=\"127\"/>\n\t<inParam\
                  \ inClass=\"face\" min=\"-1\" max=\"-1\" drawMode=\"0\" grey=\"\
                  127\"/>\n\t<inParam inClass=\"hand\" min=\"-1\" max=\"-1\" drawMode=\"\
                  0\" grey=\"127\"/>\n\t<inParam inClass=\"breast\" min=\"0\" max=\"\
                  0\" drawMode=\"2\" grey=\"127\"/>\n\t<inParam inClass=\"vulva\"\
                  \ min=\"0\" max=\"0\" drawMode=\"2\" grey=\"127\"/>\n\t<inParam\
                  \ inClass=\"penis\" min=\"0\" max=\"0\" drawMode=\"2\" grey=\"127\"\
                  />\n\t<inParam inClass=\"vagina\" min=\"0\" max=\"0\" drawMode=\"\
                  2\" grey=\"127\"/>\n\t<inParam inClass=\"buttocks\" min=\"0\" max=\"\
                  0\" drawMode=\"2\" grey=\"127\"/>\n\t<inParam inClass=\"anus\" min=\"\
                  0\" max=\"0\" drawMode=\"2\" grey=\"127\"/>\n\t<inParam inClass=\"\
                  toy\" min=\"0\" max=\"0\" drawMode=\"2\" grey=\"127\"/>\n\t<inParam\
                  \ inClass=\"oral\" min=\"0\" max=\"0\" drawMode=\"2\" grey=\"127\"\
                  />\n\t<inParam inClass=\"penetration\" min=\"0\" max=\"0\" drawMode=\"\
                  2\" grey=\"127\"/>\n</inParams>"
              Profile picture example:
                description: Allow pictures that contain only one Face
                value: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<inParams>\n\t\
                  <inParam inClass=\"face\" min=\"1\" max=\"1\" />\n</inParams>"
              Hide children example:
                description: Mask out children on the source media with black rectangles.
                value: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<inParams>\n\t\
                  <inParam inClass=\"child\" min=\"0\" max=\"0\" drawMode=\"2\" grey=\"\
                  0\"/>\n</inParams>"
              Blur sexual content example:
                description: Blur out everything related to sexuality.
                value: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<inParams>\n\t\
                  <inParam inClass=\"breast\" drawMode=\"3\" />\n\t<inParam inClass=\"\
                  vulva\" drawMode=\"3\" />\n\t<inParam inClass=\"penis\" drawMode=\"\
                  3\" />\n\t<inParam inClass=\"vagina\" drawMode=\"3\" />\n\t<inParam\
                  \ inClass=\"buttocks\" drawMode=\"3\" />\n\t<inParam inClass=\"\
                  anus\" drawMode=\"3\" />\n\t<inParam inClass=\"toy\" drawMode=\"\
                  3\" />\n\t<inParam inClass=\"oral\" drawMode=\"3\" />\n\t<inParam\
                  \ inClass=\"penetration\" drawMode=\"3\" />\n</inParams>"
            schema:
              $ref: '#/components/schemas/INParams'
          application/json:
            examples:
              Default parameter set:
                description: Shows the default parameters set by the AI.
                value:
                  inDefault:
                    thresh: "0.5"
                    grey: "127"
                  inParam:
                  - inClass: face
                    min: -1
                    max: -1
                    drawMode: "0"
                    grey: "127"
                  - inClass: hand
                    min: -1
                    max: -1
                    drawMode: "0"
                    grey: "127"
                  - inClass: breast
                    min: "0"
                    max: "0"
                    drawMode: "2"
                    grey: "127"
                  - inClass: vulva
                    min: "0"
                    max: "0"
                    drawMode: "2"
                    grey: "127"
                  - inClass: penis
                    min: "0"
                    max: "0"
                    drawMode: "2"
                    grey: "127"
                  - inClass: vagina
                    min: "0"
                    max: "0"
                    drawMode: "2"
                    grey: "127"
                  - inClass: buttocks
                    min: "0"
                    max: "0"
                    drawMode: "2"
                    grey: "127"
                  - inClass: anus
                    min: "0"
                    max: "0"
                    drawMode: "2"
                    grey: "127"
                  - inClass: toy
                    min: "0"
                    max: "0"
                    drawMode: "2"
                    grey: "127"
                  - inClass: oral
                    min: "0"
                    max: "0"
                    drawMode: "2"
                    grey: "127"
                  - inClass: penetration
                    min: "0"
                    max: "0"
                    drawMode: "2"
                    grey: "127"
              Profile picture example:
                description: Allow pictures that contain only one Face
                value:
                  inParam:
                  - inClass: face
                    min: "1"
                    max: "1"
              Hide children example:
                description: Mask out children on the source media with black rectangles.
                value:
                  inParam:
                  - inClass: child
                    min: "0"
                    max: "0"
                    drawMode: "2"
                    grey: "0"
              Blur sexual content example:
                description: Blur out everything related to sexuality.
                value:
                  inParam:
                  - inClass: breast
                    drawMode: "3"
                  - inClass: vulva
                    drawMode: "3"
                  - inClass: penis
                    drawMode: "3"
                  - inClass: vagina
                    drawMode: "3"
                  - inClass: buttocks
                    drawMode: "3"
                  - inClass: anus
                    drawMode: "3"
                  - inClass: toy
                    drawMode: "3"
                  - inClass: oral
                    drawMode: "3"
                  - inClass: penetration
                    drawMode: "3"
            schema:
              $ref: '#/components/schemas/INParams'
        required: true
      responses:
        "400":
          description: Bad request. Check for badly formatted request body.
        "200":
          description: successful operation
      summary: Set the behaviour parameters for one object class.
      tags:
      - Endpoints to setup the AI
      x-contentType: application/xml
      x-accepts: application/json
  /v1/set-definition:
    post:
      description: Each available prototype groups together a pre-defined set of parameters
        that will define the behaviour of the AI. This allows to configure multiple
        AI-checks per image. The image upload is only required once. Set the definition
        context with your needs in mind, credits are subtracted accordingly. See 'cost'
        endpoint for further information. Additionally you can overwrite specific
        parameters using 'set-parameters'. Any prior request to 'set-parameters' are
        invalidated when calling this request. This can also be used to reset the
        AI configuration.
      operationId: setINDefine
      requestBody:
        content:
          application/xml:
            examples:
              Block nudity, children, text and illegal symbols:
                description: This example shows the configuration for multiple AI-checks
                  per image.
                value: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<inDefineAI>\n\
                  \t<inImage proto=\"nudityCheck\"/>\n\t<inImage proto=\"ageEstimation\"\
                  />\n\t<inImage proto=\"textRecognition\"/>\n\t<inImage proto=\"\
                  illegalSymbols\"/>\n</inDefineAI>"
              Default AI configuration:
                description: Shows the default configuration of the AI. This is automatically
                  set, if no custom definition is posted.
                value: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<inDefineAI>\n\
                  \t<inImage proto=\"nudityCheck\"/>\n</inDefineAI>"
            schema:
              $ref: '#/components/schemas/INDefineAI'
          application/json:
            examples:
              Default AI configuration:
                description: Shows the default configuration of the AI.
                value:
                  inImage:
                  - proto: nudityCheck
              Block nudity and illegal symbols:
                description: Shows the default configuration of the AI.
                value:
                  inImage:
                  - proto: nudityCheck
                  - proto: illegalSymbols
            schema:
              $ref: '#/components/schemas/INDefineAI'
        required: true
      responses:
        "400":
          description: Bad request. Check for badly formatted request body.
        "200":
          description: successful operation
      summary: Set definitions via pre-defined prototypes.
      tags:
      - Endpoints to setup the AI
      x-contentType: application/xml
      x-accepts: application/json
  /v1/check-url/{licenseKey}:
    post:
      operationId: checkImageUrl
      parameters:
      - explode: true
        in: query
        name: url
        required: true
        schema:
          type: string
        style: form
      - description: |-
          Sets the response details.
           * _1_ - The response body informs you if the image is ok or not ok (better API performance)
          * _2_ - In addition the response body lists all broken rules.
          * _3_ - In addition to the first two options, this will show all objects with positional information.
        explode: true
        in: query
        name: detail
        required: false
        schema:
          default: 1
          format: int32
          type: integer
        style: form
      - description: License obtained from irisnet.de shop.
        explode: false
        in: path
        name: licenseKey
        required: true
        schema:
          type: string
        style: simple
      responses:
        "402":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/INError'
            application/json:
              schema:
                $ref: '#/components/schemas/INError'
          description: Not enough credits
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/IrisNet'
            application/json:
              schema:
                $ref: '#/components/schemas/IrisNet'
          description: successful operation
      summary: Check image url against previously chosen configuration.
      tags:
      - Endpoints for AI-checks
      x-accepts: application/json
  /v1/check-image/{licenseKey}:
    post:
      operationId: checkImage
      parameters:
      - description: |-
          Sets the response details.
           * _1_ - The response body informs you if the image is ok or not ok (better API performance)
          * _2_ - In addition the response body lists all broken rules.
          * _3_ - In addition to the first two options, this will show all objects with positional information.
        explode: true
        in: query
        name: detail
        required: false
        schema:
          default: 1
          format: int32
          type: integer
        style: form
      - description: License obtained from irisnet.de shop.
        explode: false
        in: path
        name: licenseKey
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object'
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  format: binary
                  type: string
              type: object
        required: true
      responses:
        "402":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/INError'
            application/json:
              schema:
                $ref: '#/components/schemas/INError'
          description: Not enough credits
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/IrisNet'
            application/json:
              schema:
                $ref: '#/components/schemas/IrisNet'
          description: successful operation
      summary: Upload and check image against previously chosen configuration.
      tags:
      - Endpoints for AI-checks
      x-contentType: multipart/form-data
      x-accepts: application/json
  /v1/info/{licenseKey}:
    get:
      operationId: getLicenseInfo
      parameters:
      - description: License obtained from the https://www.irisnet.de/prices shop.
        explode: false
        in: path
        name: licenseKey
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/LicenseInfo'
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseInfo'
          description: successful operation
        "404":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/INError'
            application/json:
              schema:
                $ref: '#/components/schemas/INError'
          description: The entered license key was not found.
      summary: Get information from given license key.
      tags:
      - Miscellaneous operations
      x-accepts: application/json
  /v1/download/{filename}:
    get:
      operationId: downloadProcessed
      parameters:
      - explode: false
        in: path
        name: filename
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Returns the file AI produced file with masking or blurring,
            depending on given AI parameters.
        "404":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/INError'
          description: Specified file was not found.
      summary: Get the resulting media file.
      tags:
      - Miscellaneous operations
      x-accepts: application/octet-stream
  /v1/cost:
    get:
      operationId: getAICost
      responses:
        "200":
          content:
            '*/*':
              schema:
                format: int64
                type: integer
          description: Contains the cost of the AI check with the current set of parameters.
        "429":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/INError'
          description: The ai could not handle the request because it is either overloaded
            or currently down for maintenance. This is a temporary state. A 'Retry-After'
            Header is included in the response to signal the client to retry after
            a certain amount of seconds.
      summary: Get the cost per image check of the previously set parameters. The
        cost of the configuration is subtracted from the license key during each check.
      tags:
      - Miscellaneous operations
      x-accepts: '*/*'
components:
  requestBodies:
    inline_object:
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/inline_object'
      required: true
  schemas:
    INDefault:
      description: An element that defines some overall defaults if needed. These
        will be applied on every parameter set. Single parameters can be still overwritten
        by their respective attributes within the 'inParam' element.
      example:
        thresh: 0.08008282
        grey: 153
      properties:
        thresh:
          default: 0.5
          description: Threshold when an object can be recognized. Lowering the value
            will increase the probability of recognizing objects. A threshhold of
            0.5 would mean, that 50% of an object like a face must be visible, to
            be detected.Setting the value too low however, can cause false positives.
          format: float
          maximum: 1.0
          minimum: 0.0
          type: number
          xml:
            attribute: true
        grey:
          default: 127
          description: A grey scale color to use for frame or masking. '0' will represent
            black, while the maximum '255' will be white.
          format: int32
          maximum: 255
          minimum: 0
          type: integer
          xml:
            attribute: true
      type: object
      xml:
        name: inDefault
    INParam:
      description: A single parameter set for one object, for example face, describing
        the behaviour of the AI. Each object has default parameters that are set if
        these are empty.
      example:
        min: 1
        drawMode: 3
        inClass: face
        max: 5
        grey: 58
      properties:
        inClass:
          description: "The classification of the object, that the element refers\
            \ to. Default parameter values are defined per classification object.\
            \ The following list contains the default values for 'min', 'max' and\
            \ 'drawMode' in order. \n* _face_ _(1, 3, 0)_ - Classification for human\
            \ faces.\n* _child_ _(0, 0, 1)_ - Recognizes children's faces. Overwrites\
            \ classification parameters of face.\n* _adult_ _(0, -1, 1)_ - Recognizes\
            \ faces of adults that are not considered seniors. Overwrites classification\
            \ parameters of face.\n* _senior_ _(0, -1, 1)_ - Recognizes faces of seniors.\
            \ Overwrites classification parameters of face.\n* _pose_ _(0, 0, 1)_\
            \ - The age can not be estimated, due to a pose that hides facial features.\n\
            * _hand_ _(0, -1, 0)_ - Classification for recognizing hands.\n* _foot_\
            \ _(0, -1, 0)_ - Classification for recognizing feet.\n* _footwear_ _(0,\
            \ -1, 0)_ - Classification for recognizing footwear.\n* _breast_ _(0,\
            \ 0, 2)_ - Object that recognizes female breasts.\n* _vulva_ _(0, 0, 2)_\
            \ - Object that recognizes vulvae.\n* _penis_ _(0, 0, 2)_ - Object that\
            \ recognizes penises.\n* _vagina_ _(0, 0, 2)_ - Object that recognizes\
            \ vaginae.\n* _buttocks_ _(0, 0, 2)_ - Object that recognizes buttocks.\n\
            * _anus_ _(0, 0, 2)_ - Object that recognizes ani.\n* _toy_ _(0, 0, 2)_\
            \ - Object that recognizes sex toys.\n* _oral_ _(0, 0, 2)_ - Object that\
            \ recognizes oral sex.\n* _penetration_ _(0, 0, 2)_ - Object that recognizes\
            \ a sexual penetration penetration.\n* _illegalSymbols_ _(0, 0, 1)_ -\
            \ Classification for symbols that are not permitted in Germany.\n\n* _textRecognition_\
            \ _(0, 3, 6)_ - Classification for recognizing text occurrences.\n\n_Please\
            \ be aware that the default values can be subject to change. This is due\
            \ to the difficulty of recognizing certain objects e.g. objects that are\
            \ classified as toy._"
          enum:
          - face
          - child
          - adult
          - senior
          - pose
          - hand
          - breast
          - vulva
          - penis
          - vagina
          - buttocks
          - anus
          - toy
          - oral
          - penetration
          - foot
          - footwear
          - nudityCheck
          - ageVerification
          - ageEstimation
          - illegalSymbols
          - textRecognition
          example: face
          type: string
          xml:
            attribute: true
        min:
          description: The minimum amount of objects allowed on the source media.
            Setting the value to -1 will cause the AI to ignore this rule.
          format: int32
          type: integer
          xml:
            attribute: true
        max:
          description: The maximum amount of objects allowed on the source media.
            Setting the value to -1 will cause the AI to ignore this rule.
          format: int32
          type: integer
          xml:
            attribute: true
        drawMode:
          description: "The draw mode that will be used for the creating the media.\
            \ \n* _0_ - will draw nothing,\n* _1_ - will draw a frame with class name\
            \ surrounding the object,\n* _2_ - will draw a filled rectangle that will\
            \ mask the object,\n* _3_ - is a combination between _1_ and _2_ (frame/name\
            \ + mask),\n* _6_ - will blur the object and\n* _7_ - is a combination\
            \ between _1_ and _6_ (frame/name + blur)."
          format: int32
          maximum: 7
          minimum: 0
          type: integer
          xml:
            attribute: true
        grey:
          default: 127
          description: A grey scale color to use for masking. '0' will represent black,
            while the maximum '255' will be white.
          format: int32
          maximum: 255
          minimum: 0
          type: integer
          xml:
            attribute: true
      type: object
      xml:
        name: inParam
    INParams:
      description: A set of parameters/rules that describe how the AI should behave.
      example:
        inParam:
        - min: 1
          drawMode: 3
          inClass: face
          max: 5
          grey: 58
        - min: 1
          drawMode: 3
          inClass: face
          max: 5
          grey: 58
        inDefault:
          thresh: 0.08008282
          grey: 153
      properties:
        inDefault:
          $ref: '#/components/schemas/INDefault'
        inParam:
          description: A list of parameter sets that describe the rules of the objects.
          items:
            $ref: '#/components/schemas/INParam'
          type: array
      type: object
      xml:
        name: inParams
    INDefineAI:
      description: Can be used to set a multitude of pre-defined commonly used rules
        without the need of specifying each parameter set.
      example:
        inImage:
        - proto: nudityCheck
        - proto: nudityCheck
      properties:
        inImage:
          description: Configures your detection. As there are literally hundreds
            of parameters, INDefine uses prototypes to get usefull behaviour. This
            includes a default setting for parameters and rules that should be applied
            to images. You can combine multiple detections by using more than 1 prototype
          items:
            $ref: '#/components/schemas/INImage'
          type: array
      type: object
      xml:
        name: inDefineAI
    INImage:
      description: Configures your detection. As there are literally hundreds of parameters,
        INDefine uses prototypes to get usefull behaviour. This includes a default
        setting for parameters and rules that should be applied to images. You can
        combine multiple detections by using more than 1 prototype
      example:
        proto: nudityCheck
      properties:
        proto:
          description: |
            Name of commonly used rule sets (prototypes). That can be used to speed up the setup process.
            * _nudityCheck_ - Commonly used prototype to check for nudity.
            * _ageVerification_ - Deprecated see 'ageEstimation'.
            * _ageEstimation_ - Checks if there are children, adults or seniors recognizable. This is intended to be a suggestion to help you implement further steps.
            * _illegalSymbols_ - Checks for symbols that are not permitted in Germany.
            * _textRecognition_ - Checks for text occurrences.
          enum:
          - nudityCheck
          - ageVerification
          - ageEstimation
          - illegalSymbols
          - textRecognition
          type: string
          xml:
            attribute: true
      type: object
      xml:
        name: inImage
    INError:
      properties:
        code:
          example: 418
          format: int32
          type: integer
        message:
          example: Here´s an example of what I can do, I can turn my handle into a
            spout, Tip me over and pour me out!
          type: string
      type: object
      xml:
        name: error
    INObject:
      description: Describes a rectangle that stretches around the recognized object.
        This is useful when redacting or blurring certain recognized objects. Each
        object contains the name of the classification and coordinates for a rectangle
        around the recognized object. The origin point (y = 0.0, x = 0.0) of the coordinate
        system is on the top left of the of the source material. The bottom right
        of the source is always y = 1 and x = 1.
      example:
        inClass: face
        probability: 94
        y0: 0.1
        x0: 0.1
        width: 0.1
        height: 0.1
      properties:
        inClass:
          description: The classification of the recognized object.
          example: face
          type: string
          xml:
            attribute: true
        x0:
          description: The starting point of the rectangle in the vertical (x) direction.
          example: 0.1
          format: float
          type: number
          xml:
            attribute: true
        y0:
          description: The starting point of the rectangle in the horizontal (y) direction.
          example: 0.1
          format: float
          type: number
          xml:
            attribute: true
        width:
          description: The distance from the starting point (y0) to end the rectangle
            in the horizontal direction.
          example: 0.1
          format: float
          type: number
          xml:
            attribute: true
        height:
          description: The distance from the starting point (x0) to end the rectangle
            in the vertical direction.
          example: 0.1
          format: float
          type: number
          xml:
            attribute: true
        probability:
          description: The probability that the object found matches the classification.
          example: 94
          format: int32
          type: integer
          xml:
            attribute: true
      type: object
    INRule:
      description: Describes the rules applied and the count of objects found for
        the given classification.
      example:
        found: 1
        min: 1
        inClass: face
        max: 1
      properties:
        inClass:
          description: The classification of the recognized object.
          example: face
          type: string
          xml:
            attribute: true
        found:
          description: The count of how many instances of the classification object
            were found.
          example: 1
          format: int32
          type: integer
          xml:
            attribute: true
        min:
          description: The minimum allowed instances of the classification object.
          example: 1
          format: int32
          type: integer
          xml:
            attribute: true
        max:
          description: The maximum allowed instances of the classification object.
          example: 1
          format: int32
          type: integer
          xml:
            attribute: true
      type: object
    IrisNet:
      description: Contains information on the AI result from the source media check.
      example:
        inRule:
        - found: 1
          min: 1
          inClass: face
          max: 1
        - found: 1
          min: 1
          inClass: face
          max: 1
        getnObjects: 1
        helpSuggested: 0
        getnClasses: 8
        rulesBroken: 0
        inObject:
        - inClass: face
          probability: 94
          y0: 0.1
          x0: 0.1
          width: 0.1
          height: 0.1
        - inClass: face
          probability: 94
          y0: 0.1
          x0: 0.1
          width: 0.1
          height: 0.1
      properties:
        rulesBroken:
          description: The amount of broken rules that are contained in the source
            media.
          example: 0
          format: int32
          type: integer
          xml:
            attribute: true
        helpSuggested:
          description: In cases where the AI is uncertain, this attribute is set (1),
            indication that it could be useful to double check the source media by
            a human.
          example: 0
          format: int32
          type: integer
          xml:
            attribute: true
        getnClasses:
          description: The amount of classification objects that were checked against
            on the source media. This does not mean that all of the classifications
            were found.
          example: 8
          format: int32
          type: integer
          xml:
            attribute: true
        getnObjects:
          description: The amount of objects that were recognized on the source image.
          example: 1
          format: int32
          type: integer
          xml:
            attribute: true
        inRule:
          description: This list contains one rule per classification. Rules for classification
            objects that were not found, are omitted.
          items:
            $ref: '#/components/schemas/INRule'
          type: array
        inObject:
          description: A list of all instances of the classification objects found
            on the source image.
          items:
            $ref: '#/components/schemas/INObject'
          type: array
      type: object
      xml:
        name: irisnet
    LicenseInfo:
      description: Describes the current balance of the given license key. A key has
        a certain amount of credits that can be used for any kind of AI recognition.
        The license key is invalid, when all of the credits have been used.
      example:
        totalCredits: 100
        creditsUsed: 14
        creditsRemaining: 86
      properties:
        creditsUsed:
          description: Credits used for the license key.
          example: 14
          format: int32
          type: integer
        creditsRemaining:
          description: Credits remaining for the license key.
          example: 86
          format: int32
          type: integer
        totalCredits:
          description: Total credits contained within the license.
          example: 100
          format: int32
          type: integer
      title: LicenseInfo
      type: object
      xml:
        name: info
    inline_object:
      properties:
        file:
          format: binary
          type: string
      type: object

